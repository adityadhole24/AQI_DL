# -*- coding: utf-8 -*-
"""Temporal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/182YkW_IF2HS-hTI_IEWPSeObR1NJtE2p
"""

from singlestep import *

from math import sqrt
import pandas as pd
import numpy as np
import pickle
import os
from sklearn.metrics import mean_squared_error
from keras.layers import Dense,LSTM,Bidirectional,BatchNormalization,Dropout,Conv1D,GRU,MaxPooling1D
from keras.models import Sequential,Model
from keras.layers.merge import concatenate
from keras.callbacks import History, ModelCheckpoint
from keras import optimizers
from keras.engine.input_layer import Input
from matplotlib import pyplot
from sklearn.preprocessing import MinMaxScaler

def naya_split(data):  #CORRECT
    train,test=data[0:365*1*24+24*30*4],data[365*1*24+24*30*4:365*1*24+24*30*6]
    train=np.split(train,len(train)/24)
    test=np.split(test,len(test)/24)
    return np.array(train),np.array(test)

def nwo_split(data):  #CORRECT
    train,test=data[0:365*3],data[365*3:365*4-1]
    train=np.split(train,len(train)/5)
    test=np.split(test,len(test)/28)
    return np.array(train),np.array(test)

def main():
  data=pd.read_csv('/content/daily_changping.csv',header=0,parse_dates=True,index_col=['No'])
  data=data.reindex(columns=["O3","year","month","day","hour","SO2","TEMP","CO","PM10","PM2.5","NO2","DEWP","RAIN","PRES","WSPM"])
  #target variable ozone
  n_input=8
  min=data['O3'].min()
  max=data['O3'].max() 
  scaler = MinMaxScaler(feature_range=(0, 1))
  data = scaler.fit_transform(data)
    
  train,test=nwo_split(data)
  print(train.shape)
  print(test.shape)
  train_x,train_y=to_supervised(train,n_input,1)
  n_timesteps,n_features,n_outputs=train_x.shape[1],train_x.shape[2],train_y.shape[1]
  print(train_x.shape)
  print(train_y.shape)

  filename = '/content/modelchangpingozone.sav'
  model = pickle.load(open(filename, 'rb'))
  #model=CNN_GRU(n_timesteps)  
  for i in range(25,37):                                
   model.get_layer(index=i).trainable=False                  #freezing 
  model.compile(optimizer='adam',loss='mse') 
  history = fit_model(train_x,train_y,model,0,0)             #finetuning 

  scores,final_score= model_eval(train,test,n_input,model,28,0)
  scores=[t*(max-min)+min for t in scores]
  print(scores)
  print(final_score*(max-min)+min)

if __name__=='__main__':
  main()

